class Node
{
	private int iData;
	public 	Node(int key){
		iData=key;
	}
	public int getKey(){
		return iData;
	}
	public void setKey(int key){
		iData=key;
	}
}

class heap
{
	private Node[] heapArray;
	private int max;  //size of array
	private int currentSize; // number of nodes in array
	
	public heap(int n){
		max=n;
		currentSize=0;
		heapArray= new Node[max];
	}
	public boolean isEmpty(){
		return currentSize==0;
	}
	public boolean insert(int key){
		if (currentSize==max)
			return false;
		heapArray[currentSize]=new Node(key);
		trickleUp(currentSize++);
		return true;
		
	}
	public void trickleUp(int index){
		int currentIndex=index;
		int parentIndex=(currentIndex-1)/2;
		Node bottom= heapArray[currentIndex];
		while(currentIndex>0&&heapArray[currentIndex].getKey()>heapArray[parentIndex].getKey()){
			heapArray[currentIndex]=heapArray[parentIndex]; //parent node down move
			currentIndex=parentIndex;
			parentIndex=(parentIndex-1)/2;	
		}
		heapArray[currentIndex]=bottom; // find the location and put the Node in
	}
	public Node move(){
		Node root=heapArray[0]; // delete the max one which is always root
		heapArray[0]=heapArray[--currentSize];// first put the last root to the root, the decrease the size
		trickleDown(0);
		return root;
	}
	public void trickleDown(int index){
		int largerChild;
		Node top= heapArray[index];//save root
		while(index<currentSize/2){ //at least one child
			int leftChild=2*index+1;
			int rightChild=leftChild+1;
			if(rightChild<currentSize&&heapArray[leftChild].getKey()<heapArray[rightChild].getKey()) // because in heap, we are not sure the right child is bigger than left. so we need first check which one is bigger
				largerChild=rightChild;
			else
				largerChild=leftChild;
			if(heapArray[largerChild].getKey()<top.getKey())
				break;
			heapArray[index]=heapArray[largerChild];
			index=largerChild; // go down	
		}
		heapArray[index]=top;
	}
}
